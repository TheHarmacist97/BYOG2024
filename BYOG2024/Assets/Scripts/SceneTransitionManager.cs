using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class SceneTransitionManager : MonoBehaviour
{
    private static SceneTransitionManager _instance;
    public static SceneTransitionManager Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = FindObjectOfType<SceneTransitionManager>();
                if (_instance == null)
                {
                    GameObject go = new GameObject(nameof(SceneTransitionManager) + "_autogenerated");
                    _instance = go.AddComponent<SceneTransitionManager>();
                    DontDestroyOnLoad(go);
                }
            }
            return _instance;
        }
        private set => _instance = value;
    }

    [SerializeField]
    private float _fadeInRate;

    [SerializeField]
    private float _fadeOutRate;

    [SerializeField]
    private Image _wipeMaterial;

    private static readonly int TransitionTime = Shader.PropertyToID("_Progress");

    private Coroutine _wipeCoroutine;

    private void Awake()
    {
        if (_instance == null)
        {
            _instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else if (_instance != this)
        {
            Destroy(gameObject);
        }

        _wipeMaterial.material.SetFloat(TransitionTime, 1f);
        StartFadeout();
    }

    public void StartFadeout()
    {
        StartCoroutine(FadeOut());
    }

    [ContextMenu("Fade In")]
    public void StartFadein()
    {
        StartCoroutine(FadeIn());
    }

    private IEnumerator FadeOut()
    {
        float elapsedTime = 0f;
        while (elapsedTime <= 1f)
        {
            elapsedTime += Time.deltaTime / _fadeOutRate;
            _wipeMaterial.material.SetFloat(TransitionTime, elapsedTime);
            yield return null;
        }
    }

    private IEnumerator FadeIn()
    {
        float elapsedTime = 1f;
        while (elapsedTime > 0f)
        {
            elapsedTime -= Time.deltaTime / _fadeInRate;
            _wipeMaterial.material.SetFloat(TransitionTime, elapsedTime);
            yield return null;
        }
    }

    private IEnumerator LoadSceneAfterWipe(int sceneIndex)
    {
        yield return FadeIn();
        yield return SceneManager.LoadSceneAsync(sceneIndex);
        yield return FadeOut();
    }

    public void LoadScene(int sceneIndex)
    {
        StartCoroutine(LoadSceneAfterWipe(sceneIndex));
    }
    public void LoadScene(string sceneName)
    {
        StartCoroutine(LoadSceneAfterWipe(SceneManager.GetSceneByName(sceneName).buildIndex));
    }

    public void LoadNextScene()
    {
        StartCoroutine(LoadSceneAfterWipe(SceneManager.GetActiveScene().buildIndex + 1));
    }
}